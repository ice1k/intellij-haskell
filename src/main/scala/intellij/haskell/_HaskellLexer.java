/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package intellij.haskell;

import com.intellij.lexer.*;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.IntStack;
import intellij.haskell.psi.HaskellTypes;
import static intellij.haskell.psi.HaskellTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_HaskellLexer.flex</tt>
 */
public class _HaskellLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NCOMMENT = 2;
  public static final int NHADDOCK = 4;
  public static final int QQ = 6;
  public static final int LAYOUT = 8;
  public static final int BOL = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 7, 4]
   * Total runtime size is 3136 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<7)|((ch>>4)&0x7f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\3\1\1\2\65\1\1\3\u01e5\1");

  /* The ZZ_CMAP_Y table has 512 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\55\1\1\13\1\14\1\15\1"+
    "\16\304\1\1\17\1\20\4\1\2\21\7\1\1\22\1\23\1\24\6\1\1\25\3\1\1\26\2\1\1\27"+
    "\1\30\1\1\1\31\2\1\1\32\2\1\1\33\2\1\1\34\63\1\1\35\144\1\1\36\20\1\1\37\51"+
    "\1");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\0\1\3\3\0\1\3\1\2\2\3\1\1\22\0\1\36\1\72\1\71\1\4\2\72\1\42\1\70\1\112"+
    "\1\113\1\73\1\74\1\114\1\25\1\35\1\72\1\30\4\64\3\33\2\23\1\105\1\115\1\76"+
    "\1\101\1\77\1\100\1\102\1\54\1\57\1\55\1\27\1\37\1\60\1\67\1\51\1\63\1\22"+
    "\1\56\1\47\1\66\1\45\1\34\1\63\1\53\1\62\1\50\1\52\1\46\1\61\1\22\1\32\1\65"+
    "\1\22\1\116\1\20\1\40\1\44\1\41\1\117\1\26\1\124\1\16\1\7\1\10\1\6\1\125\1"+
    "\134\1\5\2\21\1\12\1\132\1\11\1\15\1\131\1\21\1\14\1\13\1\127\1\17\1\43\1"+
    "\133\1\31\1\130\1\21\1\120\1\103\1\121\1\104\6\0\1\126\12\0\1\3\5\0\1\73\20"+
    "\0\1\73\7\0\1\73\1\0\31\22\7\0\31\21\12\0\1\73\23\0\2\126\6\0\12\24\10\0\1"+
    "\22\22\0\1\22\7\0\1\22\6\0\1\22\13\0\1\107\1\0\1\110\17\0\1\111\15\0\1\122"+
    "\27\0\1\75\16\0\1\106\13\0\3\73\26\0\1\73\11\0\1\123\16\0\1\73\20\0\1\21\20"+
    "\0\1\21\10\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\2\2\1\3\1\4\11\5\1\6\1\7"+
    "\2\10\1\4\1\10\1\11\1\3\1\12\1\13\1\4"+
    "\1\14\1\15\3\4\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\3\5\10\40\1\41"+
    "\1\42\1\43\5\0\1\4\1\44\1\45\3\5\1\46"+
    "\4\5\1\47\2\5\3\0\1\50\5\0\1\22\1\0"+
    "\1\51\4\0\1\52\1\53\4\5\1\54\1\55\1\56"+
    "\1\0\1\57\3\0\1\60\1\61\6\0\1\62\11\5"+
    "\1\63\2\5\1\0\1\64\1\0\1\64\3\50\1\65"+
    "\1\66\1\67\17\0\1\22\20\0\1\70\1\71\4\5"+
    "\1\0\1\72\1\61\7\0\6\5\1\73\1\74\2\5"+
    "\1\75\1\0\1\50\1\76\1\50\27\0\1\77\1\100"+
    "\2\5\1\61\3\0\1\101\6\5\1\102\4\0\1\5"+
    "\1\103\1\0\1\104\1\105\1\5\1\106\4\5\5\0"+
    "\1\107\2\5\1\110\1\5\1\111\2\0\1\76\2\0"+
    "\1\112\1\0\1\113\2\0\2\76\23\0\1\114\2\0"+
    "\1\50\5\0\1\115\1\116\1\117\3\0\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[323];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\135\0\272\0\u0117\0\u0174\0\u01d1\0\u022e\0\u028b"+
    "\0\u022e\0\u02e8\0\u0345\0\u03a2\0\u03ff\0\u045c\0\u04b9\0\u0516"+
    "\0\u0573\0\u05d0\0\u062d\0\u068a\0\u06e7\0\u0744\0\u07a1\0\u07fe"+
    "\0\u085b\0\u08b8\0\u022e\0\u0915\0\u022e\0\u05d0\0\u0972\0\u09cf"+
    "\0\u0a2c\0\u0a89\0\u0ae6\0\u0b43\0\u0ba0\0\u0972\0\u0972\0\u0972"+
    "\0\u0bfd\0\u0972\0\u0972\0\u0972\0\u0972\0\u022e\0\u022e\0\u022e"+
    "\0\u022e\0\u0c5a\0\u022e\0\u0cb7\0\u022e\0\u022e\0\u0d14\0\u0d71"+
    "\0\u0dce\0\u022e\0\u0e2b\0\u0e88\0\u0ee5\0\u0f42\0\u0f9f\0\u0ffc"+
    "\0\u1059\0\u022e\0\u022e\0\u022e\0\u10b6\0\u1113\0\u1170\0\u11cd"+
    "\0\u122a\0\u1287\0\u05d0\0\u12e4\0\u1341\0\u139e\0\u13fb\0\u05d0"+
    "\0\u1458\0\u14b5\0\u1512\0\u156f\0\u05d0\0\u15cc\0\u1629\0\u1686"+
    "\0\u16e3\0\u1740\0\u179d\0\u17fa\0\u1857\0\u18b4\0\u1911\0\u196e"+
    "\0\u19cb\0\u0a2c\0\u022e\0\u1a28\0\u1a85\0\u0c5a\0\u1ae2\0\u022e"+
    "\0\u1b3f\0\u1b9c\0\u1bf9\0\u1c56\0\u1cb3\0\u022e\0\u022e\0\u022e"+
    "\0\u1d10\0\u022e\0\u1d6d\0\u1059\0\u1dca\0\u022e\0\u1e27\0\u1e84"+
    "\0\u1ee1\0\u1f3e\0\u1f9b\0\u1ff8\0\u2055\0\u022e\0\u20b2\0\u210f"+
    "\0\u216c\0\u21c9\0\u2226\0\u2283\0\u22e0\0\u233d\0\u239a\0\u05d0"+
    "\0\u23f7\0\u2454\0\u24b1\0\u250e\0\u250e\0\u256b\0\u25c8\0\u2625"+
    "\0\u2682\0\u1857\0\u18b4\0\u022e\0\u26df\0\u273c\0\u2799\0\u27f6"+
    "\0\u2853\0\u28b0\0\u290d\0\u296a\0\u29c7\0\u2a24\0\u2a81\0\u2ade"+
    "\0\u2b3b\0\u2b98\0\u2bf5\0\u2c52\0\u2caf\0\u2d0c\0\u2d69\0\u2dc6"+
    "\0\u2e23\0\u2e80\0\u2edd\0\u2f3a\0\u2f97\0\u2ff4\0\u3051\0\u30ae"+
    "\0\u310b\0\u3168\0\u31c5\0\u3222\0\u022e\0\u022e\0\u327f\0\u32dc"+
    "\0\u3339\0\u3396\0\u33f3\0\u022e\0\u3450\0\u34ad\0\u350a\0\u3567"+
    "\0\u35c4\0\u3621\0\u367e\0\u36db\0\u3738\0\u3795\0\u37f2\0\u384f"+
    "\0\u38ac\0\u3909\0\u05d0\0\u05d0\0\u3966\0\u39c3\0\u05d0\0\u3a20"+
    "\0\u3a7d\0\u3ada\0\u3b37\0\u3b94\0\u3bf1\0\u3c4e\0\u3cab\0\u3d08"+
    "\0\u3d65\0\u3dc2\0\u3e1f\0\u3e7c\0\u3ed9\0\u3f36\0\u3f93\0\u3ff0"+
    "\0\u404d\0\u40aa\0\u4107\0\u4164\0\u41c1\0\u421e\0\u427b\0\u42d8"+
    "\0\u4335\0\u4392\0\u43ef\0\u05d0\0\u444c\0\u44a9\0\u4506\0\u4563"+
    "\0\u45c0\0\u461d\0\u467a\0\u46d7\0\u4734\0\u4791\0\u47ee\0\u484b"+
    "\0\u48a8\0\u05d0\0\u4905\0\u4962\0\u49bf\0\u4a1c\0\u4a79\0\u05d0"+
    "\0\u4ad6\0\u05d0\0\u05d0\0\u4b33\0\u05d0\0\u4b90\0\u4bed\0\u4c4a"+
    "\0\u4ca7\0\u4d04\0\u4d61\0\u4dbe\0\u4e1b\0\u4e78\0\u05d0\0\u4ed5"+
    "\0\u4f32\0\u05d0\0\u4f8f\0\u05d0\0\u4fec\0\u5049\0\u50a6\0\u5103"+
    "\0\u5160\0\u05d0\0\u51bd\0\u05d0\0\u521a\0\u5277\0\u52d4\0\u5331"+
    "\0\u538e\0\u53eb\0\u5448\0\u54a5\0\u5502\0\u555f\0\u55bc\0\u5619"+
    "\0\u5676\0\u56d3\0\u5730\0\u578d\0\u57ea\0\u5847\0\u58a4\0\u5901"+
    "\0\u595e\0\u59bb\0\u5a18\0\u022e\0\u5a75\0\u5ad2\0\u022e\0\u5b2f"+
    "\0\u5b8c\0\u5be9\0\u5c46\0\u5ca3\0\u022e\0\u022e\0\u022e\0\u5d00"+
    "\0\u5d5d\0\u5dba\0\u5e17";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[323];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\2\22\1\23\1\24\1\22\1\25"+
    "\1\22\1\26\1\27\1\30\1\31\1\22\1\26\1\32"+
    "\1\22\1\26\1\27\1\26\1\33\1\34\1\26\1\35"+
    "\1\36\1\37\1\22\1\37\17\26\1\27\3\26\1\40"+
    "\1\41\2\37\1\42\1\33\1\43\1\37\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\7\2\22\1\7\1\67\2\22\1\70\1\71"+
    "\1\22\1\72\1\73\23\72\1\74\72\72\1\75\5\72"+
    "\1\0\7\72\1\73\23\72\1\76\72\72\1\77\5\72"+
    "\1\0\7\72\1\73\101\72\1\100\12\72\1\101\7\72"+
    "\1\0\6\72\1\102\1\73\1\72\115\102\1\103\14\102"+
    "\1\104\1\73\1\72\132\104\136\0\1\12\1\11\1\12"+
    "\32\0\1\12\77\0\1\12\1\0\1\12\32\0\1\12"+
    "\77\0\1\105\1\0\1\105\1\37\1\106\1\0\1\107"+
    "\1\110\6\0\1\111\1\37\4\0\1\112\7\0\1\37"+
    "\1\105\3\0\1\37\1\0\1\37\25\0\14\37\34\0"+
    "\1\22\1\113\2\22\1\114\6\22\1\0\4\22\1\0"+
    "\7\22\2\0\1\22\1\0\1\22\1\0\1\22\1\0"+
    "\24\22\33\0\2\22\1\0\3\22\1\115\2\22\5\0"+
    "\10\22\1\116\2\22\1\0\4\22\1\0\7\22\2\0"+
    "\1\22\1\0\1\22\1\0\1\22\1\0\24\22\33\0"+
    "\2\22\1\0\6\22\5\0\3\22\1\117\4\22\1\120"+
    "\2\22\1\0\4\22\1\0\1\121\6\22\2\0\1\22"+
    "\1\0\1\22\1\0\1\22\1\0\24\22\33\0\2\22"+
    "\1\0\6\22\5\0\5\22\1\122\5\22\1\0\4\22"+
    "\1\0\7\22\2\0\1\22\1\0\1\22\1\0\1\22"+
    "\1\0\24\22\33\0\2\22\1\0\6\22\5\0\3\22"+
    "\1\123\7\22\1\0\4\22\1\0\7\22\2\0\1\22"+
    "\1\0\1\22\1\0\1\22\1\0\24\22\33\0\2\22"+
    "\1\0\6\22\5\0\3\22\1\124\7\22\1\0\4\22"+
    "\1\0\7\22\2\0\1\22\1\0\1\22\1\0\1\22"+
    "\1\0\24\22\33\0\2\22\1\0\6\22\5\0\13\22"+
    "\1\0\4\22\1\0\7\22\2\0\1\22\1\0\1\22"+
    "\1\0\1\22\1\0\24\22\33\0\2\22\1\0\6\22"+
    "\5\0\1\22\1\125\11\22\1\0\4\22\1\0\7\22"+
    "\2\0\1\22\1\0\1\22\1\0\1\22\1\0\24\22"+
    "\33\0\2\22\1\0\6\22\5\0\5\22\1\126\5\22"+
    "\1\0\4\22\1\0\1\127\6\22\2\0\1\22\1\0"+
    "\1\22\1\0\1\22\1\0\24\22\33\0\2\22\1\0"+
    "\6\22\4\0\1\37\13\0\1\37\4\0\1\37\7\0"+
    "\1\37\4\0\1\37\1\0\1\37\25\0\14\37\16\0"+
    "\1\130\15\0\13\26\1\0\4\26\1\0\7\26\2\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\24\26\33\0"+
    "\2\26\1\0\6\26\10\0\1\131\12\0\1\27\1\30"+
    "\3\0\1\27\2\0\1\27\1\0\1\132\1\0\1\131"+
    "\24\0\1\27\73\0\2\30\3\0\1\30\2\0\1\30"+
    "\30\0\1\30\54\0\1\37\13\0\1\37\2\0\1\27"+
    "\1\30\1\133\2\0\1\27\2\0\1\27\1\0\1\37"+
    "\1\134\3\0\1\37\1\0\1\37\17\0\1\27\5\0"+
    "\5\37\1\54\6\37\37\0\1\131\4\0\1\135\5\0"+
    "\1\27\1\30\3\0\1\27\2\136\1\27\1\135\1\132"+
    "\1\0\1\131\24\0\1\27\51\0\1\12\1\0\1\12"+
    "\31\0\1\132\1\12\102\0\1\37\13\0\1\37\4\0"+
    "\1\37\7\0\1\37\4\0\1\37\1\0\1\37\25\0"+
    "\14\37\27\0\2\137\1\0\15\137\1\140\47\137\1\0"+
    "\14\137\1\141\27\137\2\142\1\143\15\142\1\144\50\142"+
    "\1\143\43\142\4\0\1\37\13\0\1\37\2\0\1\27"+
    "\1\30\1\37\2\0\1\27\2\0\1\27\1\0\1\37"+
    "\1\134\3\0\1\37\1\0\1\37\17\0\1\27\5\0"+
    "\14\37\33\0\1\37\13\0\1\37\4\0\1\53\7\0"+
    "\1\37\4\0\1\37\1\0\1\37\25\0\14\37\33\0"+
    "\1\37\13\22\1\37\1\22\3\0\1\37\1\22\2\0"+
    "\1\22\3\0\1\37\3\0\1\22\1\37\1\22\1\37"+
    "\25\0\14\37\16\0\2\22\1\0\6\22\4\0\1\37"+
    "\13\0\1\37\4\0\1\37\7\0\1\37\4\0\1\37"+
    "\1\0\1\37\25\0\5\37\1\55\6\37\33\0\1\37"+
    "\13\0\1\37\4\0\1\37\7\0\1\37\4\0\1\37"+
    "\1\0\1\37\25\0\13\37\1\52\34\0\13\145\1\0"+
    "\2\145\3\0\2\145\1\0\2\145\1\0\1\145\1\146"+
    "\1\0\1\145\1\0\1\145\1\0\1\145\1\0\17\145"+
    "\1\0\3\145\5\0\1\146\2\0\1\147\2\0\1\150"+
    "\20\0\2\145\1\0\6\145\25\0\1\151\114\0\13\22"+
    "\1\0\4\22\1\0\7\22\2\0\1\22\1\0\1\22"+
    "\1\0\1\22\1\0\24\22\33\0\2\22\1\0\1\22"+
    "\1\152\3\22\1\153\5\0\10\22\1\154\2\22\1\0"+
    "\4\22\1\0\7\22\2\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\24\22\33\0\2\22\1\0\6\22\5\0"+
    "\13\22\1\0\4\22\1\0\7\22\2\0\1\22\1\0"+
    "\1\22\1\0\1\22\1\0\24\22\33\0\2\22\1\0"+
    "\5\22\1\155\2\0\1\72\253\0\1\156\40\0\1\157"+
    "\230\0\1\160\40\0\1\161\147\0\1\162\101\0\13\163"+
    "\1\0\2\163\3\0\2\163\1\0\2\163\1\0\1\163"+
    "\1\164\1\0\1\163\1\0\1\163\1\0\1\163\1\0"+
    "\17\163\1\0\3\163\5\0\1\164\2\0\1\165\2\0"+
    "\1\166\20\0\2\163\1\0\6\163\1\0\1\105\1\0"+
    "\1\105\1\0\1\106\1\0\1\107\1\110\6\0\1\111"+
    "\16\0\1\105\104\0\1\167\2\0\1\170\133\0\1\171"+
    "\135\0\1\172\1\173\1\0\1\174\131\0\1\175\127\0"+
    "\1\37\13\0\1\37\4\0\1\37\7\0\1\37\4\0"+
    "\1\37\1\0\1\37\25\0\14\37\13\0\1\176\20\0"+
    "\1\22\1\177\4\22\1\200\4\22\1\0\4\22\1\0"+
    "\7\22\2\0\1\22\1\0\1\22\1\0\1\22\1\0"+
    "\24\22\33\0\2\22\1\0\6\22\5\0\13\22\1\0"+
    "\4\22\1\0\7\22\2\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\24\22\33\0\2\22\1\0\2\22\1\201"+
    "\3\22\5\0\7\22\1\202\3\22\1\0\4\22\1\0"+
    "\7\22\2\0\1\22\1\0\1\22\1\0\1\22\1\0"+
    "\24\22\33\0\2\22\1\0\6\22\5\0\1\22\1\203"+
    "\5\22\1\204\3\22\1\0\4\22\1\0\7\22\2\0"+
    "\1\22\1\0\1\22\1\0\1\22\1\0\24\22\33\0"+
    "\2\22\1\0\6\22\5\0\13\22\1\0\4\22\1\0"+
    "\7\22\2\0\1\22\1\0\1\22\1\0\1\22\1\0"+
    "\24\22\33\0\2\22\1\0\1\205\5\22\5\0\6\22"+
    "\1\206\4\22\1\0\4\22\1\0\7\22\2\0\1\22"+
    "\1\0\1\22\1\0\1\22\1\0\24\22\33\0\2\22"+
    "\1\0\6\22\5\0\13\22\1\0\4\22\1\0\7\22"+
    "\2\0\1\22\1\0\1\22\1\0\1\22\1\0\24\22"+
    "\33\0\2\22\1\0\4\22\1\207\1\22\5\0\13\22"+
    "\1\0\4\22\1\0\7\22\2\0\1\22\1\0\1\22"+
    "\1\0\1\22\1\0\24\22\33\0\2\22\1\0\1\210"+
    "\5\22\5\0\13\22\1\0\4\22\1\0\1\211\6\22"+
    "\2\0\1\22\1\0\1\22\1\0\1\22\1\0\24\22"+
    "\33\0\2\22\1\0\6\22\5\0\6\22\1\212\4\22"+
    "\1\0\4\22\1\0\7\22\2\0\1\22\1\0\1\22"+
    "\1\0\1\22\1\0\24\22\33\0\2\22\1\0\6\22"+
    "\10\0\1\213\147\0\1\214\1\0\1\215\2\0\1\214"+
    "\2\0\1\214\30\0\1\214\7\0\1\215\63\0\1\216"+
    "\4\0\1\216\2\0\1\216\30\0\1\216\50\0\1\217"+
    "\1\220\1\0\1\221\1\37\30\217\1\37\1\221\3\217"+
    "\1\37\27\217\1\37\1\217\1\37\1\217\5\37\20\217"+
    "\1\0\11\217\35\0\1\132\127\0\1\222\2\0\1\222"+
    "\30\0\1\222\56\0\3\223\5\0\1\223\4\0\1\223"+
    "\2\0\3\223\2\0\1\223\3\0\1\223\14\0\2\223"+
    "\1\0\2\223\3\0\1\223\37\0\1\223\100\0\1\224"+
    "\52\0\1\137\2\0\1\137\2\0\1\137\1\225\2\0"+
    "\1\137\2\0\2\226\1\0\1\137\1\227\1\226\1\230"+
    "\1\0\1\226\3\0\1\231\2\0\2\137\1\232\1\233"+
    "\1\234\1\235\1\236\1\237\2\0\1\240\1\241\1\0"+
    "\1\242\1\243\1\237\1\234\1\0\1\226\2\0\1\234"+
    "\2\137\32\0\1\137\2\0\1\137\11\0\1\244\13\0"+
    "\1\244\4\0\1\244\7\0\1\244\4\0\1\244\1\0"+
    "\1\244\23\0\1\224\1\0\14\244\30\0\3\245\2\0"+
    "\1\142\2\0\1\142\2\0\1\142\1\246\2\0\1\142"+
    "\2\0\2\142\1\0\1\142\1\247\1\142\1\250\1\0"+
    "\1\142\2\0\1\245\1\251\2\0\2\142\1\252\1\253"+
    "\1\254\1\255\1\256\1\257\2\0\1\260\1\261\1\0"+
    "\1\262\1\263\1\257\1\254\1\0\1\142\2\0\1\254"+
    "\2\142\32\0\1\142\2\0\1\142\12\0\13\145\1\0"+
    "\4\145\1\0\7\145\1\146\1\0\1\145\1\0\1\145"+
    "\1\0\1\145\1\0\24\145\4\0\1\146\2\0\1\147"+
    "\2\0\1\150\20\0\2\145\1\0\6\145\5\0\13\145"+
    "\1\0\1\145\4\0\1\145\2\0\1\145\7\0\1\145"+
    "\1\0\1\145\60\0\2\145\1\0\6\145\1\0\1\264"+
    "\1\0\1\264\1\265\31\0\1\264\44\0\1\266\36\0"+
    "\13\22\1\0\4\22\1\0\7\22\2\0\1\22\1\0"+
    "\1\22\1\0\1\22\1\0\24\22\33\0\2\22\1\0"+
    "\2\22\1\267\3\22\5\0\3\22\1\270\7\22\1\0"+
    "\4\22\1\0\7\22\2\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\24\22\33\0\2\22\1\0\6\22\5\0"+
    "\2\22\1\271\10\22\1\0\4\22\1\0\7\22\2\0"+
    "\1\22\1\0\1\22\1\0\1\22\1\0\24\22\33\0"+
    "\2\22\1\0\6\22\5\0\3\22\1\272\7\22\1\0"+
    "\4\22\1\0\7\22\2\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\24\22\33\0\2\22\1\0\6\22\1\0"+
    "\1\273\1\0\1\273\32\0\1\273\44\0\1\274\36\0"+
    "\13\163\1\0\4\163\1\0\7\163\1\164\1\0\1\163"+
    "\1\0\1\163\1\0\1\163\1\0\24\163\4\0\1\164"+
    "\2\0\1\165\2\0\1\166\20\0\2\163\1\0\6\163"+
    "\5\0\13\163\1\0\1\163\4\0\1\163\2\0\1\163"+
    "\7\0\1\163\1\0\1\163\60\0\2\163\1\0\6\163"+
    "\1\167\2\0\15\167\1\275\114\167\16\0\1\276\124\0"+
    "\1\277\135\0\1\300\132\0\1\301\5\0\1\302\135\0"+
    "\1\303\127\0\1\304\132\0\1\305\12\22\1\0\4\22"+
    "\1\0\7\22\2\0\1\22\1\0\1\22\1\0\1\22"+
    "\1\0\24\22\33\0\2\22\1\0\6\22\5\0\13\22"+
    "\1\0\4\22\1\0\7\22\2\0\1\22\1\0\1\22"+
    "\1\0\1\22\1\0\24\22\33\0\2\22\1\0\1\306"+
    "\5\22\5\0\10\22\1\307\2\22\1\0\4\22\1\0"+
    "\7\22\2\0\1\22\1\0\1\22\1\0\1\22\1\0"+
    "\24\22\33\0\2\22\1\0\6\22\5\0\3\22\1\310"+
    "\7\22\1\0\4\22\1\0\7\22\2\0\1\22\1\0"+
    "\1\22\1\0\1\22\1\0\24\22\33\0\2\22\1\0"+
    "\6\22\5\0\13\22\1\0\4\22\1\0\1\311\6\22"+
    "\2\0\1\22\1\0\1\22\1\0\1\22\1\0\24\22"+
    "\33\0\2\22\1\0\6\22\5\0\1\312\12\22\1\0"+
    "\4\22\1\0\7\22\2\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\24\22\33\0\2\22\1\0\6\22\5\0"+
    "\13\22\1\0\4\22\1\0\1\313\6\22\2\0\1\22"+
    "\1\0\1\22\1\0\1\22\1\0\24\22\33\0\2\22"+
    "\1\0\6\22\5\0\3\22\1\314\7\22\1\0\4\22"+
    "\1\0\7\22\2\0\1\22\1\0\1\22\1\0\1\22"+
    "\1\0\24\22\33\0\2\22\1\0\6\22\5\0\13\22"+
    "\1\0\4\22\1\0\7\22\2\0\1\22\1\0\1\22"+
    "\1\0\1\22\1\0\24\22\33\0\2\22\1\0\1\315"+
    "\5\22\5\0\6\22\1\316\4\22\1\0\4\22\1\0"+
    "\7\22\2\0\1\22\1\0\1\22\1\0\1\22\1\0"+
    "\24\22\33\0\2\22\1\0\6\22\5\0\3\22\1\317"+
    "\7\22\1\0\4\22\1\0\7\22\2\0\1\22\1\0"+
    "\1\22\1\0\1\22\1\0\24\22\33\0\2\22\1\0"+
    "\6\22\125\0\1\320\32\0\1\214\4\0\1\214\2\0"+
    "\1\214\30\0\1\214\60\0\1\131\12\0\1\216\4\0"+
    "\1\216\2\0\1\216\3\0\1\131\24\0\1\216\50\0"+
    "\1\217\2\0\132\217\1\0\1\321\1\0\1\321\32\0"+
    "\1\321\5\0\1\322\36\0\1\322\31\0\1\217\1\321"+
    "\1\0\1\323\32\217\1\323\5\217\1\322\36\217\1\322"+
    "\31\217\30\0\1\324\2\0\1\324\30\0\1\324\73\0"+
    "\2\226\3\0\1\226\2\0\1\226\30\0\1\226\3\0"+
    "\1\224\103\0\1\325\7\0\1\326\5\0\1\327\65\0"+
    "\3\330\5\0\1\330\4\0\1\330\2\0\3\330\2\0"+
    "\1\330\3\0\1\330\14\0\2\330\1\0\2\330\3\0"+
    "\1\330\37\0\1\330\44\0\1\237\10\0\1\331\2\0"+
    "\1\332\1\0\1\333\13\0\1\137\66\0\1\137\1\0"+
    "\1\137\4\0\1\137\2\0\1\137\1\0\1\137\2\0"+
    "\3\137\2\0\20\137\1\0\3\137\12\0\1\137\13\0"+
    "\1\137\64\0\1\325\5\0\1\334\130\0\1\137\144\0"+
    "\1\137\110\0\1\335\11\0\1\336\3\0\1\337\10\0"+
    "\1\137\1\0\1\340\121\0\1\137\137\0\1\334\133\0"+
    "\1\340\5\0\1\137\111\0\1\325\10\0\1\137\134\0"+
    "\1\137\7\0\1\137\60\0\1\244\13\0\1\244\4\0"+
    "\1\244\7\0\1\244\4\0\1\244\1\0\1\244\25\0"+
    "\14\244\30\0\3\245\14\0\1\142\15\0\1\245\126\0"+
    "\1\142\2\0\1\142\30\0\1\142\107\0\1\341\7\0"+
    "\1\342\5\0\1\343\65\0\3\142\5\0\1\142\4\0"+
    "\1\142\2\0\3\142\2\0\1\142\3\0\1\142\14\0"+
    "\2\142\1\0\2\142\3\0\1\142\37\0\1\142\44\0"+
    "\1\257\10\0\1\344\2\0\1\345\1\0\1\346\13\0"+
    "\1\142\66\0\1\142\1\0\1\142\4\0\1\142\2\0"+
    "\1\142\1\0\1\142\2\0\3\142\2\0\20\142\1\0"+
    "\3\142\12\0\1\142\13\0\1\142\64\0\1\341\5\0"+
    "\1\347\130\0\1\142\144\0\1\142\110\0\1\142\11\0"+
    "\1\350\3\0\1\351\10\0\1\142\1\0\1\352\121\0"+
    "\1\142\137\0\1\347\133\0\1\352\5\0\1\142\111\0"+
    "\1\341\10\0\1\142\134\0\1\142\7\0\1\142\157\0"+
    "\1\266\36\0\3\22\1\353\7\22\1\0\4\22\1\0"+
    "\7\22\2\0\1\22\1\0\1\22\1\0\1\22\1\0"+
    "\24\22\33\0\2\22\1\0\6\22\5\0\4\22\1\354"+
    "\6\22\1\0\4\22\1\0\7\22\2\0\1\22\1\0"+
    "\1\22\1\0\1\22\1\0\24\22\33\0\2\22\1\0"+
    "\6\22\5\0\12\22\1\355\1\0\4\22\1\0\7\22"+
    "\2\0\1\22\1\0\1\22\1\0\1\22\1\0\24\22"+
    "\33\0\2\22\1\0\6\22\5\0\7\22\1\356\3\22"+
    "\1\0\4\22\1\0\7\22\2\0\1\22\1\0\1\22"+
    "\1\0\1\22\1\0\24\22\33\0\2\22\1\0\6\22"+
    "\103\0\1\274\31\0\1\167\1\357\16\167\1\275\114\167"+
    "\12\0\1\360\127\0\1\361\134\0\1\301\135\0\1\167"+
    "\136\0\1\167\141\0\1\362\127\0\1\301\131\0\13\22"+
    "\1\0\4\22\1\0\3\22\1\363\3\22\2\0\1\22"+
    "\1\0\1\22\1\0\1\22\1\0\24\22\33\0\2\22"+
    "\1\0\6\22\5\0\13\22\1\0\4\22\1\0\1\364"+
    "\6\22\2\0\1\22\1\0\1\22\1\0\1\22\1\0"+
    "\24\22\33\0\2\22\1\0\6\22\5\0\7\22\1\365"+
    "\3\22\1\0\4\22\1\0\7\22\2\0\1\22\1\0"+
    "\1\22\1\0\1\22\1\0\24\22\33\0\2\22\1\0"+
    "\6\22\5\0\1\366\12\22\1\0\4\22\1\0\7\22"+
    "\2\0\1\22\1\0\1\22\1\0\1\22\1\0\24\22"+
    "\33\0\2\22\1\0\6\22\5\0\12\22\1\367\1\0"+
    "\4\22\1\0\7\22\2\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\24\22\33\0\2\22\1\0\6\22\5\0"+
    "\13\22\1\0\4\22\1\0\7\22\2\0\1\22\1\0"+
    "\1\22\1\0\1\370\1\0\24\22\33\0\2\22\1\0"+
    "\6\22\5\0\13\22\1\0\4\22\1\0\7\22\2\0"+
    "\1\22\1\0\1\22\1\0\1\22\1\0\24\22\33\0"+
    "\2\22\1\0\1\22\1\371\4\22\5\0\6\22\1\372"+
    "\4\22\1\0\4\22\1\0\7\22\2\0\1\22\1\0"+
    "\1\22\1\0\1\22\1\0\24\22\33\0\2\22\1\0"+
    "\6\22\5\0\1\373\130\0\1\321\1\0\1\321\32\0"+
    "\1\321\76\0\1\322\1\374\1\375\132\322\1\217\1\321"+
    "\1\0\1\323\32\217\1\323\76\217\30\0\1\324\2\0"+
    "\1\324\30\0\1\324\3\0\1\224\113\0\1\137\124\0"+
    "\1\137\161\0\1\137\56\0\3\330\5\0\1\330\4\0"+
    "\1\330\2\0\3\330\2\0\1\330\3\0\1\330\14\0"+
    "\2\330\1\0\2\330\3\0\1\330\3\0\1\224\33\0"+
    "\1\330\63\0\1\137\136\0\1\137\111\0\1\137\24\0"+
    "\1\137\133\0\1\137\127\0\1\137\16\0\1\224\123\0"+
    "\1\137\107\0\1\137\147\0\1\137\136\0\1\142\124\0"+
    "\1\142\161\0\1\142\123\0\1\142\136\0\1\142\111\0"+
    "\1\142\24\0\1\142\133\0\1\142\135\0\1\142\107\0"+
    "\1\142\147\0\1\142\74\0\13\22\1\0\4\22\1\0"+
    "\7\22\1\0\1\376\1\22\1\0\1\22\1\0\1\22"+
    "\1\0\24\22\33\0\2\22\1\0\6\22\5\0\5\22"+
    "\1\377\5\22\1\0\4\22\1\0\7\22\2\0\1\22"+
    "\1\0\1\22\1\0\1\22\1\0\24\22\33\0\2\22"+
    "\1\0\6\22\5\0\3\22\1\u0100\7\22\1\0\4\22"+
    "\1\0\7\22\2\0\1\22\1\0\1\22\1\0\1\22"+
    "\1\0\24\22\33\0\2\22\1\0\6\22\1\167\1\0"+
    "\16\167\1\275\114\167\17\0\1\u0101\126\0\1\302\137\0"+
    "\1\167\125\0\5\22\1\u0102\1\22\1\u0103\3\22\1\0"+
    "\4\22\1\0\7\22\2\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\24\22\33\0\2\22\1\0\6\22\5\0"+
    "\4\22\1\u0104\6\22\1\0\4\22\1\0\7\22\2\0"+
    "\1\22\1\0\1\22\1\0\1\22\1\0\24\22\33\0"+
    "\2\22\1\0\6\22\5\0\13\22\1\0\4\22\1\0"+
    "\7\22\2\0\1\22\1\0\1\22\1\0\1\22\1\0"+
    "\24\22\33\0\2\22\1\0\1\u0105\5\22\5\0\13\22"+
    "\1\0\4\22\1\0\7\22\2\0\1\22\1\0\1\22"+
    "\1\0\1\22\1\0\24\22\33\0\1\22\1\u0106\1\0"+
    "\6\22\5\0\5\22\1\u0107\5\22\1\0\4\22\1\0"+
    "\7\22\2\0\1\22\1\0\1\22\1\0\1\22\1\0"+
    "\24\22\33\0\2\22\1\0\6\22\5\0\1\u0108\12\22"+
    "\1\0\4\22\1\0\7\22\2\0\1\22\1\0\1\22"+
    "\1\0\1\22\1\0\24\22\33\0\2\22\1\0\6\22"+
    "\5\0\13\22\1\0\4\22\1\0\7\22\2\0\1\22"+
    "\1\0\1\22\1\0\1\22\1\0\24\22\33\0\2\22"+
    "\1\0\2\22\1\u0109\3\22\11\0\1\u010a\124\0\3\375"+
    "\14\0\1\u010b\4\0\1\u010c\10\0\1\375\77\0\1\375"+
    "\1\0\1\375\14\0\1\u010b\4\0\1\u010c\10\0\1\375"+
    "\103\0\1\u010d\1\u010e\133\0\3\22\1\u010f\7\22\1\0"+
    "\4\22\1\0\7\22\2\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\24\22\33\0\2\22\1\0\6\22\7\0"+
    "\1\302\132\0\11\22\1\u0110\1\22\1\0\4\22\1\0"+
    "\7\22\2\0\1\22\1\0\1\22\1\0\1\22\1\0"+
    "\24\22\33\0\2\22\1\0\6\22\5\0\4\22\1\u0111"+
    "\6\22\1\0\4\22\1\0\7\22\2\0\1\22\1\0"+
    "\1\22\1\0\1\22\1\0\24\22\33\0\2\22\1\0"+
    "\6\22\5\0\13\22\1\0\4\22\1\0\7\22\2\0"+
    "\1\22\1\0\1\22\1\0\1\22\1\0\24\22\33\0"+
    "\2\22\1\0\1\u0112\5\22\5\0\4\22\1\u0113\6\22"+
    "\1\0\4\22\1\0\7\22\2\0\1\22\1\0\1\22"+
    "\1\0\1\22\1\0\24\22\33\0\2\22\1\0\6\22"+
    "\5\0\3\22\1\u0114\7\22\1\0\4\22\1\0\7\22"+
    "\2\0\1\22\1\0\1\22\1\0\1\22\1\0\24\22"+
    "\33\0\2\22\1\0\6\22\120\0\1\u0115\140\0\1\u0116"+
    "\35\0\1\u0117\120\0\1\u0118\151\0\1\u0119\113\0\3\22"+
    "\1\u011a\7\22\1\0\4\22\1\0\7\22\2\0\1\22"+
    "\1\0\1\22\1\0\1\22\1\0\24\22\33\0\2\22"+
    "\1\0\6\22\5\0\13\22\1\0\4\22\1\0\7\22"+
    "\1\0\1\u011b\1\22\1\0\1\22\1\0\1\22\1\0"+
    "\24\22\33\0\2\22\1\0\6\22\5\0\13\22\1\0"+
    "\4\22\1\0\7\22\2\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\24\22\33\0\1\22\1\u011c\1\0\6\22"+
    "\16\0\1\u011d\126\0\1\u011e\124\0\1\322\1\u011f\1\375"+
    "\1\u0120\1\0\30\322\1\0\1\u0120\3\322\1\0\27\322"+
    "\1\0\1\322\1\0\1\322\5\0\20\322\1\0\11\322"+
    "\13\0\1\u0121\253\0\1\u0122\7\0\1\u0123\2\0\1\u0124"+
    "\141\0\1\u0125\244\0\1\u0126\10\0\1\u011f\1\375\1\u011f"+
    "\14\0\1\u010b\4\0\1\u010c\10\0\1\u011f\76\0\1\322"+
    "\1\u011f\1\375\1\u0120\32\322\1\u0120\76\322\127\0\1\u0127"+
    "\12\0\1\u0128\261\0\1\u0129\33\0\1\u012a\112\0\1\u012b"+
    "\132\0\1\u012c\155\0\1\u012d\120\0\1\u012e\253\0\1\u012f"+
    "\134\0\1\u0130\13\0\1\u0131\135\0\1\u0132\134\0\1\u0133"+
    "\253\0\1\u0134\21\0\1\u0135\134\0\1\u0136\240\0\1\u0137"+
    "\133\0\1\u0138\32\0\1\u0139\132\0\1\u013a\134\0\1\u013b"+
    "\136\0\1\u013c\126\0\1\u013d\253\0\1\u013e\134\0\1\u013f"+
    "\22\0\1\u0140\126\0\1\u0141\135\0\1\u0142\245\0\1\u0143"+
    "\14\0\1\374\1\375\132\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24180];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\1\1\1\11\21\1\1\11\1\1\1\11"+
    "\20\1\4\11\1\1\1\11\1\1\2\11\3\1\1\11"+
    "\7\1\3\11\5\0\16\1\3\0\1\1\5\0\1\1"+
    "\1\0\1\11\4\0\1\11\5\1\3\11\1\0\1\11"+
    "\3\0\1\11\1\1\6\0\1\11\14\1\1\0\1\1"+
    "\1\0\6\1\1\11\17\0\1\1\20\0\2\11\4\1"+
    "\1\0\1\11\1\1\7\0\13\1\1\0\3\1\27\0"+
    "\5\1\3\0\10\1\4\0\2\1\1\0\10\1\5\0"+
    "\6\1\2\0\1\1\2\0\1\1\1\0\1\1\2\0"+
    "\2\1\23\0\1\11\2\0\1\11\5\0\3\11\3\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[323];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _HaskellLexer() {
    this((java.io.Reader)null);
    stateMonad.push(YYINITIAL);
  }

  private static final int EMPTY_LAYOUT = -3;
  private static final int NO_LAYOUT = -2;
  private final IntStack layoutMonad = new IntStack();
  private final IntStack stateMonad = new IntStack();

  private void pushLexState(int newState) {
    stateMonad.push(newState);
    yybegin(newState);
  }

  private int popLexState() {
    int oldState = yystate();
    assert !stateMonad.empty();
    yybegin(stateMonad.pop());
    return oldState;
  }

  private void pushLayout(int newLayout) {
    layoutMonad.push(newLayout);
  }

  private int getLayout() {
    return layoutMonad.empty() ? EMPTY_LAYOUT : layoutMonad.peek();
  }

  private int popLayout() {
    return layoutMonad.pop();
  }

    private int commentStart;
    private int commentDepth;
    private int yycolumn = -1;

    private int haddockStart;
    private int haddockDepth;

    private int qqStart;
    private int qqDepth;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzMarkedPosL*/);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case NCOMMENT: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return HS_NOT_TERMINATED_COMMENT;
            }  // fall though
            case 324: break;
            case NHADDOCK: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = haddockStart;
        return HS_NOT_TERMINATED_COMMENT;
            }  // fall though
            case 325: break;
            case QQ: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = qqStart;
        return HS_QUASIQUOTE;
            }  // fall though
            case 326: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 80: break;
          case 2: 
            { pushLexState(BOL); return HS_NEWLINE;
            } 
            // fall through
          case 81: break;
          case 3: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 82: break;
          case 4: 
            { return HS_VARSYM_ID;
            } 
            // fall through
          case 83: break;
          case 5: 
            { return HS_VAR_ID;
            } 
            // fall through
          case 84: break;
          case 6: 
            { return HS_BACKSLASH;
            } 
            // fall through
          case 85: break;
          case 7: 
            { return HS_CON_ID;
            } 
            // fall through
          case 86: break;
          case 8: 
            { return HS_DECIMAL;
            } 
            // fall through
          case 87: break;
          case 9: 
            { return HS_DOT;
            } 
            // fall through
          case 88: break;
          case 10: 
            { return HS_RIGHT_BRACKET;
            } 
            // fall through
          case 89: break;
          case 11: 
            { return HS_UNDERSCORE;
            } 
            // fall through
          case 90: break;
          case 12: 
            { return HS_QUOTE;
            } 
            // fall through
          case 91: break;
          case 13: 
            { return HS_DOUBLE_QUOTE;
            } 
            // fall through
          case 92: break;
          case 14: 
            { return HS_EQUAL;
            } 
            // fall through
          case 93: break;
          case 15: 
            { return HS_AT;
            } 
            // fall through
          case 94: break;
          case 16: 
            { return HS_VERTICAL_BAR;
            } 
            // fall through
          case 95: break;
          case 17: 
            { return HS_TILDE;
            } 
            // fall through
          case 96: break;
          case 18: 
            { return HS_CONSYM_ID;
            } 
            // fall through
          case 97: break;
          case 19: 
            { return HS_COLON_COLON;
            } 
            // fall through
          case 98: break;
          case 20: 
            { return HS_LEFT_ARROW;
            } 
            // fall through
          case 99: break;
          case 21: 
            { return HS_RIGHT_ARROW;
            } 
            // fall through
          case 100: break;
          case 22: 
            { return HS_DOUBLE_RIGHT_ARROW;
            } 
            // fall through
          case 101: break;
          case 23: 
            { return HS_LEFT_PAREN;
            } 
            // fall through
          case 102: break;
          case 24: 
            { return HS_RIGHT_PAREN;
            } 
            // fall through
          case 103: break;
          case 25: 
            { return HS_COMMA;
            } 
            // fall through
          case 104: break;
          case 26: 
            { return HS_SEMICOLON;
            } 
            // fall through
          case 105: break;
          case 27: 
            { return HS_LEFT_BRACKET;
            } 
            // fall through
          case 106: break;
          case 28: 
            { return HS_BACKQUOTE;
            } 
            // fall through
          case 107: break;
          case 29: 
            { return HS_LEFT_BRACE;
            } 
            // fall through
          case 108: break;
          case 30: 
            { return HS_RIGHT_BRACE;
            } 
            // fall through
          case 109: break;
          case 31: 
            { return HS_FORALL;
            } 
            // fall through
          case 110: break;
          case 32: 
            { 
            } 
            // fall through
          case 111: break;
          case 33: 
            { popLexState();
        pushLayout(yycolumn);
        yypushback(1);
        return HS_LEFT_BRACE;
            } 
            // fall through
          case 112: break;
          case 34: 
            { popLexState();
        pushLayout(NO_LAYOUT);
        return HS_LEFT_BRACE;
            } 
            // fall through
          case 113: break;
          case 35: 
            { int n = getLayout();
        switch (n) {
            case EMPTY_LAYOUT:
            case NO_LAYOUT:
                popLexState();
                break;
            default:
                if (yycolumn < n) {
                    popLayout();
                    return HS_RIGHT_BRACE;
                } else if (yycolumn == n) {
                    popLexState();
                    yypushback(1);
                    return HS_SEMICOLON;
                } else {
                    popLexState();
                    yypushback(1);
                }
                break;
        }
            } 
            // fall through
          case 114: break;
          case 36: 
            { return HS_IF;
            } 
            // fall through
          case 115: break;
          case 37: 
            { pushLexState(LAYOUT); return HS_IN;
            } 
            // fall through
          case 116: break;
          case 38: 
            { pushLexState(LAYOUT); return HS_DO;
            } 
            // fall through
          case 117: break;
          case 39: 
            { pushLexState(LAYOUT); return HS_OF;
            } 
            // fall through
          case 118: break;
          case 40: 
            { return HS_COMMENT;
            } 
            // fall through
          case 119: break;
          case 41: 
            { return HS_STRING_LITERAL;
            } 
            // fall through
          case 120: break;
          case 42: 
            { yybegin(QQ);
    qqDepth = 0;
    qqStart = getTokenStart();
            } 
            // fall through
          case 121: break;
          case 43: 
            { yybegin(NCOMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
            } 
            // fall through
          case 122: break;
          case 44: 
            { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return HS_NCOMMENT;
        }
            } 
            // fall through
          case 123: break;
          case 45: 
            { commentDepth++;
            } 
            // fall through
          case 124: break;
          case 46: 
            { if (haddockDepth > 0) {
            haddockDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = haddockStart;
             return HS_NHADDOCK;
        }
            } 
            // fall through
          case 125: break;
          case 47: 
            { if (qqDepth > 0) {
            qqDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = qqStart;
             return HS_QUASIQUOTE;
        }
            } 
            // fall through
          case 126: break;
          case 48: 
            { qqDepth++;
            } 
            // fall through
          case 127: break;
          case 49: 
            { return HS_DIRECTIVE;
            } 
            // fall through
          case 128: break;
          case 50: 
            { return HS_PRAGMA_END;
            } 
            // fall through
          case 129: break;
          case 51: 
            { pushLexState(LAYOUT); return HS_LET;
            } 
            // fall through
          case 130: break;
          case 52: 
            { return HS_FLOAT;
            } 
            // fall through
          case 131: break;
          case 53: 
            { return HS_OCTAL;
            } 
            // fall through
          case 132: break;
          case 54: 
            { return HS_HEXADECIMAL;
            } 
            // fall through
          case 133: break;
          case 55: 
            { return HS_CHARACTER_LITERAL;
            } 
            // fall through
          case 134: break;
          case 56: 
            { return HS_PRAGMA_START;
            } 
            // fall through
          case 135: break;
          case 57: 
            { yybegin(NHADDOCK);
    haddockDepth = 0;
    haddockStart = getTokenStart();
            } 
            // fall through
          case 136: break;
          case 58: 
            { haddockDepth++;
            } 
            // fall through
          case 137: break;
          case 59: 
            { return HS_DATA;
            } 
            // fall through
          case 138: break;
          case 60: 
            { return HS_ELSE;
            } 
            // fall through
          case 139: break;
          case 61: 
            { return HS_CASE;
            } 
            // fall through
          case 140: break;
          case 62: 
            { return HS_HADDOCK;
            } 
            // fall through
          case 141: break;
          case 63: 
            { return HS_TYPE;
            } 
            // fall through
          case 142: break;
          case 64: 
            { return HS_THEN;
            } 
            // fall through
          case 143: break;
          case 65: 
            { return HS_INFIX;
            } 
            // fall through
          case 144: break;
          case 66: 
            { return HS_CLASS;
            } 
            // fall through
          case 145: break;
          case 67: 
            { pushLexState(LAYOUT); return HS_WHERE;
            } 
            // fall through
          case 146: break;
          case 68: 
            { return HS_INFIXL;
            } 
            // fall through
          case 147: break;
          case 69: 
            { return HS_INFIXR;
            } 
            // fall through
          case 148: break;
          case 70: 
            { return HS_IMPORT;
            } 
            // fall through
          case 149: break;
          case 71: 
            { return HS_MODULE;
            } 
            // fall through
          case 150: break;
          case 72: 
            { return HS_DEFAULT;
            } 
            // fall through
          case 151: break;
          case 73: 
            { return HS_NEWTYPE;
            } 
            // fall through
          case 152: break;
          case 74: 
            { return HS_INSTANCE;
            } 
            // fall through
          case 153: break;
          case 75: 
            { return HS_DERIVING;
            } 
            // fall through
          case 154: break;
          case 76: 
            { return HS_TYPE_FAMILY;
            } 
            // fall through
          case 155: break;
          case 77: 
            { return HS_TYPE_INSTANCE;
            } 
            // fall through
          case 156: break;
          case 78: 
            { return HS_FOREIGN_IMPORT;
            } 
            // fall through
          case 157: break;
          case 79: 
            { return HS_FOREIGN_EXPORT;
            } 
            // fall through
          case 158: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
