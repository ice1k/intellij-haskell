// Originally derived from http://www.haskell.org/onlinereport/haskell2010/haskellch10.html
{
  parserClass="intellij.haskell.parser.HaskellParser"
  parserUtilClass="intellij.haskell.psi.HaskellParserUtil"

  implements="intellij.haskell.psi.HaskellCompositeElement"
  extends="intellij.haskell.psi.impl.HaskellCompositeElementImpl"

  psiClassPrefix="Haskell"
  psiImplClassSuffix="Impl"
  psiPackage="intellij.haskell.psi"
  psiImplPackage="intellij.haskell.psi.impl"

  elementTypeHolderClass="intellij.haskell.psi.HaskellTypes"
  elementTypeClass="intellij.haskell.psi.HaskellCompositeElementType"
  tokenTypeClass="intellij.haskell.psi.HaskellTokenType"

  psiImplUtilClass="intellij.haskell.psi.impl.HaskellPsiImplUtil"

  elementTypePrefix="HS_"

  methods("varid|varsym|conid|consym|modid")=[getName setName getNameIdentifier getReference getPresentation]
  methods("varid|conid|modid|varsym")=[toString]
  extends("varid|varsym|conid|consym|modid")="intellij.haskell.psi.impl.HaskellNamedStubBasedPsiElementBase<?>"
  implements("varid|varsym|conid|consym|modid")="intellij.haskell.psi.HaskellNamedElement"
  elementTypeFactory("varid|varsym|conid|consym|modid")="intellij.haskell.psi.impl.HaskellElementTypeFactory.factory"

  methods("type_signature|type_declaration|class_declaration|instance_declaration|type_family_declaration|deriving_declaration|type_instance_declaration")=[getName getPresentation getIdentifierElements getModuleName]
  methods("default_declaration|foreign_declaration|module_declaration")=[getName getPresentation getIdentifierElements getModuleName]
  implements("type_signature|type_declaration|class_declaration|instance_declaration|type_family_declaration|deriving_declaration|type_instance_declaration|default_declaration")="intellij.haskell.psi.HaskellDeclarationElement"
  implements("default_declaration|foreign_declaration|module_declaration")="intellij.haskell.psi.HaskellDeclarationElement"
  extends(".*_declaration")=top_declaration
  extends(".*_guard")=guard

  methods("data_declaration|newtype_declaration")=[getName getPresentation getIdentifierElements getModuleName getDataTypeConstructor]
  implements("data_declaration|newtype_declaration")="intellij.haskell.psi.HaskellDataConstructorDeclarationElement"

  methods("var_con|q_var_con")=[getName getIdentifierElement]

  methods("q_name|cname")=[getName getIdentifierElement getQualifierName]
  implements("q_name|cname")="intellij.haskell.psi.HaskellQualifiedNameElement"

  implements("expression")="intellij.haskell.psi.HaskellExpressionElement"
  mixin("expression")="intellij.haskell.psi.impl.HaskellExpressionElementImpl"
  extends(".*_expression")=expression

  methods("var|con|varop|conop")=[getName]
  implements("var|con|varop|conop")="intellij.haskell.psi.HaskellCNameElement"
  mixin("var|con|varop|conop")="intellij.haskell.psi.impl.HaskellCNameElementImpl"

  methods("q_con_qualifier1|q_con_qualifier2|q_con_qualifier3|q_con_qualifier4|qualifier")=[getName setName getNameIdentifier getReference getPresentation]
  implements("q_con_qualifier1|q_con_qualifier2|q_con_qualifier3|q_con_qualifier4|qualifier")="intellij.haskell.psi.HaskellQualifierElement"
  mixin("q_con_qualifier1|q_con_qualifier2|q_con_qualifier3|q_con_qualifier4|qualifier")="intellij.haskell.psi.impl.HaskellQualifierElementImpl"
  implements("q_con_qualifier1|q_con_qualifier2|q_con_qualifier3|q_con_qualifier4|qualifier")="intellij.haskell.psi.HaskellNamedElement"

  implements("text_literal")=["intellij.haskell.psi.HaskellStringLiteralElement" "com.intellij.psi.PsiLanguageInjectionHost"]
  mixin("text_literal")="intellij.haskell.psi.impl.HaskellStringLiteralElementImpl"
}

program                     ::= onl shebang_line? onl file_header? onl module_body?

shebang_line                ::= "#!" general_id+
file_header                 ::= (pragma onl)+
pragma                      ::= PRAGMA_START general_pragma_content* PRAGMA_END {pin=1}
general_pragma_content      ::= ONE_PRAGMA | PRAGMA_SEP | CHARACTER_LITERAL | STRING_LITERAL | NEWLINE | DASH | HASH

module_body                 ::= module_declaration | body
module_declaration          ::= MODULE modid onl pragma? onl (exports onl)? where_clause
where_clause                ::= WHERE LEFT_BRACE body RIGHT_BRACE? {pin=1}

private body                ::= import_declarations? top_declarations? onl
import_declarations         ::= ((import_declaration | pragma | DIRECTIVE) onl)+
private top_declarations    ::= (top_declaration semi)+

import_declaration          ::= IMPORT (onls pragma)? (onls import_qualified)? (onls import_package_name)? onls modid onls import_qualified_as? onls import_spec?    {methods=[getModuleName] pin=1}
import_qualified            ::= "qualified"
import_qualified_as         ::= "as" qualifier
import_spec                 ::= import_ids_spec | import_hiding_spec

import_ids_spec             ::= LEFT_PAREN onls imported_ids? RIGHT_PAREN
private imported_ids        ::= import_id (onls COMMA? onls import_id)* onls COMMA? onls
import_hiding_spec          ::= import_hiding onls LEFT_PAREN onls (import_id onls (onls COMMA onls import_id)* onls COMMA?)? onls RIGHT_PAREN
import_hiding               ::= "hiding"
import_id                   ::= TYPE? (cname onls LEFT_PAREN onls (cname_dot_dot onls (COMMA onls cname_dot_dot onls)* onls)? RIGHT_PAREN | cname)
import_package_name         ::= text_literal

top_declaration             ::= type_declaration | data_declaration | newtype_declaration | class_declaration | instance_declaration | default_declaration |
                                  foreign_declaration | type_family_declaration | deriving_declaration | type_instance_declaration | type_signature |
                                  pragma | fixity_declaration | DIRECTIVE | implementation_declaration
implementation_declaration  ::= expression EQUAL rhs {pin=2}
private rhs                 ::= expr_rhs | guarded_rhs+
expr_rhs                    ::= expression where_clause? {pin=1}
guarded_rhs                 ::= guards EQUAL expression {pin=1}
private guards              ::= VERTICAL_BAR guard {pin=1}
guard                       ::= pattern_guard | let_guard | expression_guard
pattern_guard               ::= expression LEFT_ARROW expression {pin=2}
let_guard                   ::= LET cdecls {pin=1}
expression_guard            ::= expression

type_declaration            ::= TYPE onls simpletype onls COLON_COLON onls ttype |
                                  TYPE onls simpletype onls (EQUAL | WHERE) onls (ttype | type_signature) (DOUBLE_RIGHT_ARROW ttype)? |
                                  TYPE onls simpletype onls EQUAL onls expression |
                                  TYPE onls simpletype onls (LEFT_PAREN onls kind_signature onls RIGHT_PAREN)* onls (EQUAL onls ttype | COLON_COLON ttype) |
                                  TYPE onls simpletype


data_declaration            ::= DATA (onls pragma)? onls INSTANCE? onls (ccontext onls DOUBLE_RIGHT_ARROW)? onls simpletype onls (LEFT_PAREN onls kind_signature onls RIGHT_PAREN)* onls (COLON_COLON ttype)? onls q_name* onls (EQUAL | WHERE)?
                                    onls (type_signature (nls type_signature)* | constrs) (onls data_declaration_deriving)? |
                                  DATA (onls pragma)? onls (LEFT_PAREN onls kind_signature onls RIGHT_PAREN)* onls simpletype onls (LEFT_PAREN onls kind_signature onls RIGHT_PAREN)* onls (COLON_COLON ttype)? onls q_name* (onls data_declaration_deriving)?

kind_signature              ::= q_name COLON_COLON ttype

data_declaration_deriving   ::= (DERIVING onl ttype | DERIVING onl LEFT_PAREN ttype (onl COMMA onl ttype)* onl RIGHT_PAREN)+

newtype_declaration         ::= NEWTYPE onls INSTANCE? onls pragma? onls (ccontext onls DOUBLE_RIGHT_ARROW)? onls simpletype onls EQUAL onls newconstr (onls DERIVING onls ttype)?

class_declaration           ::= CLASS onls (scontext onls DOUBLE_RIGHT_ARROW)? onls (q_name+ | ttype) onls (q_name | LEFT_PAREN ttype (onls COMMA onls ttype)* RIGHT_PAREN)*
                                    (onls VERTICAL_BAR onls ttype (onls COMMA onls ttype)*)? onls WHERE? onls cdecls? |
                                  CLASS onls scontext onls DOUBLE_RIGHT_ARROW onls (q_name+ | ttype) onls WHERE? onls cdecls?  // seen in Control.Lens.Internal.Indexed

instance_declaration        ::= INSTANCE onls ("OVERLAPPABLE_" | "OVERLAPPING_" | pragma)? onls (var_con+ DOT)? onls (scontext onls DOUBLE_RIGHT_ARROW)? onls
                                    (type_equality | q_name onls inst (onls WHERE (onls cidecls)?)?)    // this way of using type equality in Data.Type.Equality

type_equality               ::= q_name+ TILDE q_name+

default_declaration         ::= DEFAULT onls (type_signature | LEFT_PAREN (ttype (COMMA ttype)*)? RIGHT_PAREN)

type_instance_declaration   ::= TYPE_INSTANCE onls expression

type_signature              ::= q_names onls COLON_COLON (onls ccontext onls DOUBLE_RIGHT_ARROW)* onls ttype !EQUAL |
                                  q_names onls LEFT_PAREN onls q_names onls COMMA onls ccontext onls DOUBLE_RIGHT_ARROW onls ttype onls RIGHT_PAREN   // seen in  Test.Hspec.Expectations: with_loc(shouldBe, (Show a, Eq a) => a -> a -> Expectation)

fixity_declaration          ::= fixity DECIMAL? q_names

foreign_declaration         ::= (FOREIGN_IMPORT | FOREIGN_EXPORT) onls expression

type_family_declaration     ::= TYPE_FAMILY onls type_family_type (onls (WHERE | EQUAL) (onls expression)?)?

deriving_declaration        ::= DERIVING INSTANCE (scontext onls DOUBLE_RIGHT_ARROW)? onls q_name onls inst

text_literal                ::= STRING_LITERAL

private literal             ::= DECIMAL | HEXADECIMAL | OCTAL | FLOAT | CHARACTER_LITERAL | text_literal

private keyword             ::= DATA | CLASS | INSTANCE | NEWTYPE | DERIVING | DEFAULT | TYPE_FAMILY | TYPE | TYPE_INSTANCE | IMPORT | MODULE

private onl                 ::= (DIRECTIVE? NEWLINE)*
private semi                ::= DIRECTIVE* SEMICOLON? DIRECTIVE*
private onls                ::= (&<<containsSpaces>> NEWLINE | DIRECTIVE NEWLINE !keyword)*       // optional multiple (new line and spaces)
private nls                 ::= (&<<containsSpaces>> NEWLINE)+                          // multiple new lines and spaces
private oonls               ::= (&<<containsSpaces>> NEWLINE)?                         // optional one (new line and spaces)

comments                    ::= COMMENT | NCOMMENT | HADDOCK | NHADDOCK | NOT_TERMINATED_COMMENT // rule is necessary to refer to various comment types in code

modid                       ::= (conid DOT)* conid {pin=1 stubClass = "intellij.haskell.psi.stubs.HaskellModidStub"}

varid                       ::= VAR_ID "#"? {stubClass = "intellij.haskell.psi.stubs.HaskellVaridStub"}
conid                       ::= CON_ID "#"? {stubClass = "intellij.haskell.psi.stubs.HaskellConidStub"}
varsym                      ::= VARSYM_ID | DOT+ VARSYM_ID | DOT+ EQUAL | DOT+ BACKSLASH | DOT+ TILDE | DOT+ AT | DOT+ CONSYM_ID | DOT+ VERTICAL_BAR | DOT DOT DOT+ | DOT     {stubClass = "intellij.haskell.psi.stubs.HaskellVarsymStub"}
consym                      ::= CONSYM_ID   {stubClass = "intellij.haskell.psi.stubs.HaskellConsymStub"}

cname                       ::= var | con | conop | varop
var                         ::= varid | LEFT_PAREN varsym RIGHT_PAREN
con                         ::= conid | LEFT_PAREN consym RIGHT_PAREN
varop                       ::= varsym | BACKQUOTE varid BACKQUOTE
conop                       ::= consym | BACKQUOTE conid BACKQUOTE

var_con                     ::= varid | consym | varsym | conid
q_var_con                   ::= &<<noSpaceAfterQualifier>> qualifier DOT (varid | consym | varsym) | q_con

qualifier                   ::= conid (DOT conid)*

q_con                       ::= &<<noSpaceAfterQualifier>> q_con_qualifier4 DOT conid | &<<noSpaceAfterQualifier>> q_con_qualifier3 DOT conid | &<<noSpaceAfterQualifier>> q_con_qualifier2 DOT conid | &<<noSpaceAfterQualifier>> q_con_qualifier1 DOT conid
q_con_qualifier4            ::= conid DOT conid DOT conid DOT conid
q_con_qualifier3            ::= conid DOT conid DOT conid
q_con_qualifier2            ::= conid DOT conid
q_con_qualifier1            ::= conid
q_con_qualifier             ::= q_con_qualifier4 | q_con_qualifier3 | q_con_qualifier2 | q_con_qualifier1  // used for renaming

q_name                      ::= q_var_con | var_con | LEFT_PAREN q_var_con RIGHT_PAREN | LEFT_PAREN var_con RIGHT_PAREN | BACKQUOTE q_var_con BACKQUOTE | BACKQUOTE var_con BACKQUOTE
q_names                     ::= q_name (COMMA q_name)*

gtycon                      ::= QUOTE? q_name | LEFT_PAREN RIGHT_ARROW RIGHT_PAREN | LEFT_PAREN RIGHT_PAREN | QUOTE? LEFT_BRACKET RIGHT_BRACKET | LEFT_PAREN COMMA (COMMA)* RIGHT_PAREN

private constrs             ::= constr (onls VERTICAL_BAR onls constr)*
constr                      ::= (type_signature | constr1 | constr2 | constr3)
constr1                     ::= pragma? (onls q_name)? (onls pragma)? onls LEFT_BRACE onl fielddecl? ((onl COMMA)? onl fielddecl)* onl RIGHT_BRACE
constr2                     ::= pragma? onls (ttype | q_name | LEFT_PAREN q_name* RIGHT_PAREN | LEFT_BRACKET q_name* RIGHT_BRACKET) (onls pragma onls)? ((onls pragma)? onls ttype (onls pragma)?)*  // Base.hs: data () = () and GHC.Types.hs: data [] a = [] | a : [a]
constr3                     ::= (onls pragma? onls ttype)+

fielddecl                   ::= q_names (onl COLON_COLON pragma? (onls ("forall" | FORALL) (onls q_name)+)? (onls scontext onls DOUBLE_RIGHT_ARROW)? pragma? onls ttype)?

private forall_sym          ::= "forall" | FORALL
private atype               ::= (forall_sym ((onl q_name+ onl LEFT_PAREN onl (type_signature | ttype) onl (COMMA onl (type_signature | ttype))* onl RIGHT_PAREN)+ | (onl q_name)+) (onl DOUBLE_RIGHT_ARROW onl ttype)? |
                                  (q_name | UNDERSCORE)* LEFT_PAREN ttype1 RIGHT_PAREN |
                                  (q_name | UNDERSCORE)* LEFT_BRACE ttype1 RIGHT_BRACE |
                                  (q_name | UNDERSCORE)* LEFT_PAREN ttype2 RIGHT_PAREN |
                                  (q_name | UNDERSCORE)* LEFT_BRACE ttype2 RIGHT_BRACE |
                                  QUOTE? LEFT_BRACKET oonls ttype (oonls COMMA oonls ttype)* oonls RIGHT_BRACKET |
                                  QUOTE? (q_name (oonls COLON_COLON oonls ttype)?)+ | QUOTE? LEFT_PAREN RIGHT_PAREN | QUOTE? LEFT_BRACKET RIGHT_BRACKET | LEFT_PAREN COMMA+ RIGHT_PAREN  | literal | LEFT_PAREN RIGHT_ARROW RIGHT_PAREN | NEWLINE DIRECTIVE) !COLON_COLON

ttype1                      ::= (onl "#")? onl ttype ((onl COMMA)? onl ttype)* onl ("#" onl)?
ttype2                      ::= forall_sym? onl ttype (onl DOUBLE_RIGHT_ARROW onl ttype)? onl


ttype                       ::= "!"? (btype (oonls RIGHT_ARROW oonls ttype)* | list_type q_name* | LEFT_PAREN RIGHT_ARROW RIGHT_PAREN)

private btype               ::= (atype | TILDE)+     // generalization because left recursive is not supported

simpletype                  ::= ttype | (q_name | LEFT_PAREN RIGHT_PAREN)+ |
                                  q_name* oonls LEFT_PAREN q_name RIGHT_PAREN oonls q_name* |
                                  q_name oonls q_name* oonls (LEFT_PAREN type_signature RIGHT_PAREN)+ oonls q_name* |
                                  q_name | LEFT_PAREN RIGHT_PAREN | LEFT_BRACKET RIGHT_BRACKET q_name*    {methods=[getIdentifierElements]}

list_type                   ::= LEFT_BRACKET (COLON_COLON | q_name) RIGHT_BRACKET

type_family_type            ::= (q_name | LEFT_PAREN? q_names COLON_COLON? onls (ccontext DOUBLE_RIGHT_ARROW)? onls ttype? RIGHT_PAREN?)+ (COLON_COLON onls ttype)?

ccontext                     ::= LEFT_PAREN onls clazz (onls COMMA onls clazz)* onls RIGHT_PAREN |
                                  clazz

clazz                       ::=  q_name COLON_COLON q_name | ttype |
                                  q_name+ |
                                  q_name LEFT_PAREN q_name atype+ RIGHT_PAREN |
                                  q_name LEFT_PAREN q_name+ RIGHT_PAREN q_name*

scontext                    ::= simpleclass | simpleclass onls LEFT_PAREN onls simpleclass (onls COMMA onls simpleclass)* onls RIGHT_PAREN

simpleclass                 ::= ttype | q_name+ LEFT_PAREN q_name+ RIGHT_PAREN q_name* | q_name+

inst                        ::= gtycon+ instvar* (LEFT_PAREN onls gtycon (instvar)* onls RIGHT_PAREN)* instvar* |
                                  (LEFT_PAREN onls instvar (onls COMMA onls instvar)+ onls RIGHT_PAREN)+ instvar* |
                                  QUOTE? (LEFT_BRACKET onls instvar onls RIGHT_BRACKET)+ instvar* |
                                  (LEFT_PAREN onls instvar+ onls RIGHT_PAREN)+ instvar* |
                                  ((LEFT_PAREN onls instvar+ (onls RIGHT_ARROW onls instvar+)+ onls RIGHT_PAREN)+ instvar*)+

instvar                     ::= ttype | q_name | LEFT_BRACKET q_name+ RIGHT_BRACKET | LEFT_PAREN q_name+ RIGHT_PAREN | LEFT_PAREN RIGHT_PAREN

private fixity              ::= INFIXL | INFIXR | INFIX

exports                     ::= LEFT_PAREN onl export ((onl COMMA)? onl export)* (onl COMMA)? onl RIGHT_PAREN | LEFT_PAREN RIGHT_PAREN
export                      ::= export3 | export2 | export4 | export5
private export3             ::= (q_con | cname) onl LEFT_PAREN (onl cname_dot_dot (onl COMMA onl cname_dot_dot)*)? onl RIGHT_PAREN
private export2             ::= TYPE? onl cname+
private export4             ::= MODULE modid
private export5             ::= conid DOT cname | LEFT_PAREN con DOT cname RIGHT_PAREN
cname_dot_dot               ::= dot_dot | cname

newconstr                   ::= newconstr_fielddecl | q_name atype
newconstr_fielddecl         ::= q_name onls LEFT_BRACE? onls type_signature onls RIGHT_BRACE?

private cdecls              ::= cdecl (nls cdecl)*
private cidecls             ::= cidecl (nls cidecl)*

// copy of data_declaration but without all onls
cdecl_data_declaration      ::= DATA (onls pragma)? onls (LEFT_PAREN onls kind_signature onls RIGHT_PAREN)* onls simpletype (onls LEFT_PAREN onls kind_signature onls RIGHT_PAREN)* (onls COLON_COLON ttype)? q_name*
cdecl                       ::= type_signature | cdecl_data_declaration | cidecl

cidecl                      ::= pragma | instance_declaration | default_declaration |
                                  newtype_declaration | data_declaration | type_declaration | type_family_declaration | implementation_declaration
                                  {extends=cdecl}

expression                  ::= let_abstraction | do_notation_expression | if_expression | application_expression | case_of_expression | atom
paren_expression            ::= LEFT_PAREN expression RIGHT_PAREN
bracket_expression          ::= LEFT_BRACKET expression RIGHT_BRACKET
application_expression      ::= expression atom+
private atom                ::= atom_expression | bracket_expression | paren_expression
atom_expression             ::= general_id

private general_id          ::= QUASIQUOTE | q_name | symbol_reserved_op | reserved_id | FLOAT |
                                  literal | COMMA | QUOTE | BACKQUOTE |
                                  pragma | DIRECTIVE | DOUBLE_QUOTES
let_abstraction             ::= LET LEFT_BRACE let_definition* cdecl? RIGHT_BRACE? semi IN expression {pin=1 extends=expression}
do_notation_expression      ::= DO LEFT_BRACE do_definition* expression? RIGHT_BRACE? {pin=1}
if_expression               ::= IF expression THEN expression ELSE expression {pin=1}
case_of_expression          ::= CASE expression OF LEFT_BRACE case_definition* case_clause? RIGHT_BRACE? {pin=1}

private let_definition      ::= cdecl SEMICOLON
private do_definition       ::= expression SEMICOLON
private case_definition     ::= case_clause SEMICOLON
case_clause                 ::= expression RIGHT_ARROW expression {pin=2}

dot_dot                     ::= DOT DOT
private symbol_reserved_op  ::= dot_dot | COLON_COLON | BACKSLASH | VERTICAL_BAR | LEFT_ARROW | AT | TILDE | DOUBLE_RIGHT_ARROW

reserved_id                 ::= CASE | DEFAULT | DERIVING | IMPORT | INSTANCE | NEWTYPE | TYPE | UNDERSCORE
